import logging
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application, CommandHandler, MessageHandler, 
    ContextTypes, ConversationHandler, filters
)
from datetime import datetime, timedelta
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from bot.database import db
from bot.models import Birthday, Chat
from bot.config import Config

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
GETTING_USERNAME, GETTING_DATE = range(2)

class BirthdayBot:
    def __init__(self):
        self.application = None
        self.scheduler = AsyncIOScheduler()
        
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        await self._save_chat(update.effective_chat)
        
        welcome_text = """
        üéâ Birthday Reminder Bot! üéÇ

        –Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!

        –ö–æ–º–∞–Ω–¥—ã:
        /add - –î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞
        /list - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫
        /remove - –£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞
        /help - –ü–æ–º–æ—â—å

        –î–æ–±–∞–≤–ª—è–π—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥–æ–π /add
        """
        await update.message.reply_text(welcome_text)
    
    async def add_birthday(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è"""
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ username —É—á–∞—Å—Ç–Ω–∏–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: @username):",
            reply_markup=ReplyKeyboardRemove()
        )
        return GETTING_USERNAME
    
    async def get_username(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–∏—Ç—å username –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        username = update.message.text.strip()
        if not username.startswith('@'):
            username = '@' + username
        
        context.user_data['username'] = username
        
        await update.message.reply_text(
            f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –¥–ª—è {username} (—Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì):"
        )
        return GETTING_DATE
    
    async def get_date(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å"""
        try:
            date_str = update.message.text.strip()
            birth_date = datetime.strptime(date_str, "%d.%m.%Y").date()
            
            username = context.user_data['username']
            
            session = db.get_session()
            birthday = Birthday(username=username, birth_date=birth_date)
            session.add(birthday)
            session.commit()
            
            await update.message.reply_text(
                f"‚úÖ {username} –¥–æ–±–∞–≤–ª–µ–Ω —Å –¥–∞—Ç–æ–π —Ä–æ–∂–¥–µ–Ω–∏—è {birth_date.strftime('%d.%m.%Y')}"
            )
            
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞: /add"
            )
        finally:
            session.close()
        
        return ConversationHandler.END
    
    async def list_birthdays(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è"""
        session = db.get_session()
        try:
            birthdays = session.query(Birthday).order_by(Birthday.birth_date).all()
            
            if not birthdays:
                await update.message.reply_text("üì≠ –°–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è –ø—É—Å—Ç")
                return
            
            message = "üéÇ –°–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è:\n\n"
            for bday in birthdays:
                message += f"{bday.username} - {bday.birth_date.strftime('%d.%m.%Y')}\n"
            
            await update.message.reply_text(message)
            
        finally:
            session.close()
    
    async def remove_birthday(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–¥–∞–ª–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è"""
        if not context.args:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /remove @username")
            return
        
        username = context.args[0]
        if not username.startswith('@'):
            username = '@' + username
        
        session = db.get_session()
        try:
            birthday = session.query(Birthday).filter(Birthday.username == username).first()
            
            if birthday:
                session.delete(birthday)
                session.commit()
                await update.message.reply_text(f"‚úÖ {username} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞")
            else:
                await update.message.reply_text(f"‚ùå {username} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ")
                
        finally:
            session.close()
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏"""
        help_text = """
        ü§ñ Birthday Bot - –ü–æ–º–æ—â—å

        –ö–æ–º–∞–Ω–¥—ã:
        /add - –î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ (–∑–∞–ø—Ä–æ—Å–∏—Ç username –∏ –¥–∞—Ç—É)
        /list - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        /remove @username - –£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞
        /help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

        –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15.12.1990)
        """
        await update.message.reply_text(help_text)
    
    async def _save_chat(self, chat):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ"""
        session = db.get_session()
        try:
            existing_chat = session.query(Chat).filter(Chat.chat_id == str(chat.id)).first()
            if not existing_chat:
                new_chat = Chat(chat_id=str(chat.id), title=chat.title)
                session.add(new_chat)
                session.commit()
                logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —á–∞—Ç: {chat.title}")
        finally:
            session.close()
    
    async def check_birthdays(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
        logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è...")
        
        session = db.get_session()
        try:
            tomorrow = datetime.now() + timedelta(days=1)
            
            # –ò—â–µ–º –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–∞ –∑–∞–≤—Ç—Ä–∞
            birthdays = session.query(Birthday).filter(
                Birthday.birth_date.day == tomorrow.day,
                Birthday.birth_date.month == tomorrow.month
            ).all()
            
            if birthdays:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —á–∞—Ç—ã
                chats = session.query(Chat).all()
                
                for chat in chats:
                    try:
                        message = "üéÇ –ó–∞–≤—Ç—Ä–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É:\n"
                        for bday in birthdays:
                            message += f"{bday.username}\n"
                        message += "\n–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–∑–¥—Ä–∞–≤–∏—Ç—å!"
                        
                        await self.application.bot.send_message(
                            chat_id=chat.chat_id,
                            text=message
                        )
                        logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç: {chat.title}")
                        
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —á–∞—Ç {chat.chat_id}: {e}")
            
        finally:
            session.close()
    
    def setup_scheduler(self):
        """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏—è"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00
        self.scheduler.add_job(
            self.check_birthdays,
            CronTrigger(hour=Config.REMINDER_HOUR, minute=Config.REMINDER_MINUTE),
            id='birthday_check'
        )
        self.scheduler.start()
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")
    
    def run(self):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"""
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db.init_db()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.application = Application.builder().token(Config.BOT_TOKEN).build()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        conv_handler = ConversationHandler(
            entry_points=[CommandHandler('add', self.add_birthday)],
            states={
                GETTING_USERNAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.get_username)],
                GETTING_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.get_date)],
            },
            fallbacks=[CommandHandler('cancel', self.help_command)],
        )
        
        self.application.add_handler(conv_handler)
        self.application.add_handler(CommandHandler('start', self.start))
        self.application.add_handler(CommandHandler('list', self.list_birthdays))
        self.application.add_handler(CommandHandler('remove', self.remove_birthday))
        self.application.add_handler(CommandHandler('help', self.help_command))
        
        # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        self.setup_scheduler()
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        self.application.run_polling()

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
if __name__ == '__main__':
    bot = BirthdayBot()
    bot.run()